---
title: "Inheritance in Python"
seoTitle: "Python Inheritance"
seoDescription: "Basic explanation of inheritance in python"
datePublished: Sun Oct 09 2022 18:44:45 GMT+0000 (Coordinated Universal Time)
cuid: cl91p31dv000109kxdkr5f2o1
slug: inheritance-in-python
cover: https://cdn.hashnode.com/res/hashnode/image/unsplash/rH8O0FHFpfw/upload/v1665177434766/J_5Pa3Se9.jpeg
tags: python, python3, python-beginner

---

Do you find it difficult to comprehend how Python handles inheritance? You ought to be familiar with the fundamentals of inheritance, types, and a straightforward implementation by the end of this article.

**What is Inheritance?**
This is the process of incorporating the parent class's properties into the existing class.

**What's the purpose of inheritance?**

Creating new classes from scratch can be time-consuming and we do not want verbose and complicated code. As a result, inheritance allows us to reuse our code while also using an existing class to create a new class rather than starting from scratch.
An actual-world example: Animal has a subclass called Dog. We can make a Dog class by inheriting Animal properties like whiskers, tail, ears, nose, fur, paws, and so on.

**Syntax**

```
class BaseClass:
        Body of base class
class DerivedClass(BaseClass):
        Body of derived class
``` 

There are various types of Inheritance


- **Single Inheritance**: In this, a child class inherits from a single parent class

```
#parent class#
class Dog:
    def dog_info(self):
        print('Inside the Dog class')
#derived class
class Paws(Dog):
    def paws_info(self):
        print('Inside the Paws class')
#object of class
paw1 = Paws()

paw1.dog_info()
paw1.paws_info()
``` 

```
Output
Inside the Dog class
Inside the Paws class
``` 

- **Multiple Inheritance**: one child class can inherit from multiple parent classes.
```
#parent class 1
class Dog:
    #define function
    def dog_info(self, name, color):
        print('Name:', name, 'Color:', color)
#parent class 2
class Shelter:
    def shelter_info(self, name, location):
        print('Shelter name:', name, 'Location:', location)
#child class
class Adoption(Dog, Shelter):
    def Adoption_info(self, qualities, breed):
        print('Qualities:', qualities, 'Breed:', breed)
#create object of Adoption
adp = Adoption()
#to access the data
adp.dog_info('Buddy', 'Brown')
adp.shelter_info("Mary's shelter", 'Lagos, Nigeria')
adp.Adoption_info('Buddy is a lovely dog', 'Golden retriever')
```  

```
Output
Name: Buddy Color: Brown
Shelter name: Mary's shelter Location: Lagos, Nigeria
Qualities: Buddy is a lovely dog Breed: Golden retriever
``` 
In the above example, the Adoption class inherits from the Dog and Shelter class. 

The object of the Adoption class can be gotten using this syntax

```
<object_name> = <class_name>(<arguments>)
``` 

- **Multilevel Inheritance**: A class derives from a child or derived class. Assume we have three classes: A, B, and C. The superclass is A, the child class is B, and the child class of B is C.


```
#parent class
class Dog:
    #define function
    def dog_info(self):
        print('This is the parent class')

#child class1
class Shelter(Dog):
    def shelter_info(self):
        print('This inherits from the parent class')

#child class2
class Adoption(Shelter):
    def Adoption_info(self):
        print('This inherits from the Shelter class')

#create object of Adoption
adp = Adoption()

adp.dog_info()
adp.shelter_info()
adp.Adoption_info()
``` 

- **Hierarchical Inheritance**: A single parent class gives rise to multiple child classes. In other words, there is one parent class and several child classes.

```
#parent class
class Dog:
    def info(self):
        print('This is a Dog')

#child class1
class Shelter(Dog):
    def dog_info(self, name):
        print("The dog's name is: ", name)

#child class2
class Adoption(Dog):
    def adoption_info(self, name):
        print('The name of the adoption center is: ', name)

#create object of Adoption
adp1 = Shelter()
adp1.info()
adp1.dog_info("Buddy")

adp2 = Adoption()
adp2.adoption_info("Mary's adoption center")
``` 

```
Output

This is a Dog
The dog's name is:  Buddy
The name of the adoption center is:  Mary's adoption center
``` 


- **Hybrid Inheritance**: This is made up of several types or a mix of different inheritance.
A parent class gives birth to child classes 1 and 2, who in turn give birth to the grandchild, child class 3.


```
#parent class
class Dog:
    def info(self):
        print('This is a Dog')

#child class1
class DogName(Dog):
    def dog_name(self):
        print("The dog is a Labrador")

#child class2
class Center(Dog):
    def center_info(self):
        print("The name of the adoption center is Mary's Adoption center")

#child class3 inherits properties of Dog and DogName
class Adoption(DogName, Dog):
    def adoption_info(self):
        print("This is the dog's adoption information")

#create object of Adoption
adp1 = Adoption()
adp1.info()
adp1.dog_name()
adp1.adoption_info()
``` 

```
Output

This is a Dog
The dog is a Labrador
This is the dog's adoption information
``` 

Note: In the above example if you call Dog before DogName

```
class Adoption(Dog, DogName)
``` 
You'll get a TypeError

```
Traceback (most recent call last):
  File "c:\Users\BENEDICTA\exercise\test.py", line 37, in <module>
    class Adoption(Dog, DogName):
TypeError: Cannot create a consistent method resolution
order (MRO) for bases Dog, DogName
``` 
Python makes advantage of the **MRO (Method Order Resolution)** notion. This is the hierarchy of classes and the order in which a method is looked for. The arrangement is also known as **Class Linearization**. The MRO is left to right and bottom to top.

Syntax:

```
class A:
    def method(self):
        print('In class A')
class B(A):
    def method(self):
        print('In class B')
class C(B, A):
    def method(self):
        print('In class C')

#create object of class C
c = C()
c.method()
``` 

```
Output

In class C
``` 
When c.method() is called in this case, it searches for the method first; thus, it is the only one that was executed. If it is not found in C, it will look in its immediate superclass.














