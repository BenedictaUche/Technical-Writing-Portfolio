---
title: "Top 14 Shell Commands Regular Users Should Know"
datePublished: Sat Jul 08 2023 13:44:26 GMT+0000 (Coordinated Universal Time)
cuid: clju24j38000209l9gw4uajv0
slug: top-14-shell-commands-regular-users-should-know
cover: https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/4Mw7nkQDByk/upload/beca9ace6e00bbc8e18fe01bb1d80c54.jpeg
tags: productivity, bash, 2articles1week, linux-for-beginners, shell-script

---

### Introduction

As I embarked on my programming journey, I encountered various challenges, one of which was the daunting task of creating new folders, files and navigating through them using [Visual Studio Code](https://code.visualstudio.com/) (VSCode). This aspect of coding often left me feeling overwhelmed and was one of the many reasons I took a break from programming.

However, everything changed when I discovered the incredible capabilities of shell commands.

In this article, I will share with you the potential of shell commands. Drawing from my personal experience, I will demonstrate how mastering a few essential commands can help you interact with your operating system, ultimately enhancing your task execution.

By incorporating these commands into your routine, you can streamline your computing experience.

### What is Shell?

Shell is a program that extracts commands from the user's keyboard and passes them to the Operating system (OS) to execute.

### What is a terminal?

The terminal is a program that opens a window, providing you with an interactive interface to engage with the shell

### Examples of Shell Programs

While BASH is the most popular shell program, it is worth noting that there are other types of shell programs available as well. Some popular alternatives to BASH are:

* [ksh](https://www.computerhope.com/unix/uksh.htm)
    
* [tcsh](https://www.computerhope.com/jargon/t/tcsh.htm)
    
* [Zch](https://linuxconfig.org/learn-the-basics-of-the-zsh-shell)
    

### How to identify the running shell

To identify the shell you're running, follow these steps:

* Open your terminal or command prompt
    
* Run the command `echo $0`
    
* The current running shell, in this case `bash` will be printed, allowing you to identify the shell you're using.
    

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1688745500479/4aff3ac2-561d-4e79-ac6e-3f63d9538f8f.png align="center")

## Prerequisites

To effectively follow this guide, you will need to have either of the following tools installed and accessible on your computer:

* Command Prompt (Windows)
    
* Git Bash ([Windows](https://git-scm.com/download/win)/[Linux](https://git-scm.com/download/linux)/[macOS](https://git-scm.com/download/mac))
    

Now let's get into the commands

1. **cd** - change directory
    
    * Open the terminal. Once opened, you will find yourself in the root directory
        
    * Navigate to your Documents directory with `cd documents`
        
2. **mkdir** - create directories
    
    * Create a folder called *first\_project*
        
        ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1688776943069/37a03b2d-20fe-4027-821c-1d60a81fc599.png align="left")
        
    * Run `cd first_project` to get into the folder created
        
3. **pwd** - prints the working directory
    
    * Run `pwd` to know what directory you are in.
        
        ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1688778533949/b5ed1d66-06e7-4512-a0d5-04869e411d31.png align="left")
        
4. **touch** - creates an empty file
    
    * Run `touch file_name` to create an empty file in the `first_project` folder
        
        ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1688777472667/e0c7eddd-8464-4cb3-a81b-ce30aadf618f.png align="left")
        
5. **ls** - list files in the working directory
    
    * Run `ls` to see the file created. The only file in the directory is the `file_one` created previously
        
        ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1688777827194/862682c4-f65d-4704-b1f4-4bf9badf57f3.png align="left")
        
6. **ls -a** - List all files including filenames that start with a period '.'
    
    * Create a file named "*.gitignore*" that starts with a period by running the command `touch .gitignore`.
        
    * In the working directory, run `ls -a` to list all files
        
        ```bash
        ls -a
        #output - ./ ../ .gitignore file_one
        ```
        
        ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1688778290995/fc1e889a-03d0-49d5-b9ff-8b112039f1ab.png align="left")
        
7. **mv** - move or rename files and directories
    
    * Syntax is `mv [file1] [file2]`
        
    * To rename the file "file\_one" execute the command `mv file_one new_file`.
        
        ```bash
        mv file_one new_file
        ```
        
    * Run `ls` to list the files and see the changes made
        
        ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1688824178238/0e0f3e97-8610-47fb-866a-8b9b7688cde1.png align="center")
        
        Only the file "*new\_file*" is displayed because `ls` does not list files starting with a period. To see all files, including those that begin with a period, run the command `ls -a`.
        
8. **rmdir** - deletes a directory
    
    * Run `rmdir directory` to delete the directory
        
    * The terminal will return an error if the directory/folder to be deleted isn't empty. To override this run `rm -rf directory_name`
        
    * Create a folder in the directory `mkdir new_folder`
        
    * Create a new file `touch file_two`
        
    * Move the new file created into the `new_folder` created
        
        ```bash
        mv file_two new_folder
        ```
        
    * To check if the file\_two folder was moved to the new\_folder, list the file in the `new_folder` by running `ls new_folder`
        
        ![](https://cdn.hashnode.com/res/hashnode/image/upload/v1688780345328/42d7c54e-3d83-4eb8-b3bd-8da9bebebc77.png align="left")
        
    * Run `rmdir new_folder` and an error will be returned as the folder isn't empty
        
        ```bash
        $ rmdir new_folder
        rmdir: failed to remove 'new_folder': Directory not empty
        ```
        
    * Run `rm -rf new_folder` to forcefully delete the folder
        
9. **cp** - copy files and directories
    
    * To allow users duplicate files or backup directories easily
        
        ```bash
        cp [file1] [file2]
        ```
        
10. **mkdir -p** - creates multiple directories/folders
    
    * Create multiple folders
        
        ```bash
        mkdir -p animal/cat/kitten
        ```
        
        We have 3 folders with just the execution of one command. The structure of the folder will be:
        
        ```bash
        ├── animal
        │    ├── cat       
        │       ├── kitten
        ```
        
11. **code .** - to open the folder in VSCode
    
    * Run `code .` in the directory or folder you want to open. Upon running the command, the folder will automatically open in VSCode.
        
12. **chmod u+x** - makes the file executable
    
    * The command permits users to execute a file as a program or script. Note that "u" represents the *user* and "x" represents *execute*
        
    * Run `chmod u+x [filename]` which in this case is `chmod u+x welcome`.
        
13. **echo** - to write text to a file and display text/output on the terminal
    
    * To write a file into a file use the output redirection '&gt;' symbol.
        
        Run the following command to create a file called "*touch.txt*" and attach the phrase "*Hello World*" to it. If the file already exists, the new text will replace it.
        
        ```bash
        echo "Hello World" > touch.txt
        ```
        
        To attach text to an existing file without overwriting it, use the double greater than sign(&gt;&gt;).
        
        ```bash
        echo "Hi there" >> touch.txt
        ```
        
14. **cat** - display contents of your file
    
    * Run `cat touch.txt` to display the content of the *touch.txt* file
        

## Conclusion

Now you can share the latest commands you've learned with your coder friends. Pretty cool, right? Learning shell commands as a beginner can greatly enhance efficiency, offering greater control and troubleshooting possibilities. So, don't be intimidated by the terminal interface and get started. Happy shelling!

## Resources

Check out these resources to learn more about shell commands:

* [Top 50 Linux commands you must know](https://www.digitalocean.com/community/tutorials/linux-commands)
    
* [Basic Shell Commands in Linux](https://www.geeksforgeeks.org/basic-shell-commands-in-linux/)
